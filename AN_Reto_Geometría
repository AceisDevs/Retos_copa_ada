üìã Contexto

Una aplicaci√≥n de dise√±o gr√°fico necesita un sistema para calcular √°reas y per√≠metros de diferentes formas geom√©tricas.
El arquitecto del software dise√±√≥ la estructura base usando clases abstractas y herencia, pero dej√≥ el trabajo incompleto. 
Tu misi√≥n es completar la implementaci√≥n siguiendo los principios de POO.

üéØ Objetivo
Completa el c√≥digo faltante implementando:

Clase Circulo: con c√°lculos de √°rea (œÄr¬≤) y per√≠metro (2œÄr)
Clase Rectangulo: con base y altura, √°rea y per√≠metro
Clase Triangulo: usando la f√≥rmula de Her√≥n para el √°rea
Clase ColeccionFormas: para gestionar m√∫ltiples formas

üìê F√≥rmulas Necesarias

√Årea del c√≠rculo: œÄ √ó radio¬≤
Per√≠metro del c√≠rculo: 2 √ó œÄ √ó radio
√Årea del rect√°ngulo: base √ó altura
Per√≠metro del rect√°ngulo: 2 √ó (base + altura)
√Årea del tri√°ngulo (Her√≥n): ‚àö[s(s-a)(s-b)(s-c)] donde s = (a+b+c)/2

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from abc import ABC, abstractmethod
import math

class Forma(ABC):
    """Clase abstracta base para todas las formas geom√©tricas"""
    
    @abstractmethod
    def area(self):
        """Calcula el √°rea de la forma"""
        pass
    
    @abstractmethod
    def perimetro(self):
        """Calcula el per√≠metro de la forma"""
        pass
    
    def descripcion(self):
        """Retorna una descripci√≥n formateada de la forma"""
        return f"{self.__class__.__name__}: √Årea={self.area():.2f}, Per√≠metro={self.perimetro():.2f}"

class Circulo(Forma):
    """
    TODO: Completar la clase Circulo
    - Constructor que reciba el radio
    - Validar que el radio sea positivo
    - Implementar m√©todo area()
    - Implementar m√©todo perimetro()
    """
    def __init__(self, radio):
        pass
    
    def area(self):
        pass
    
    def perimetro(self):
        pass

class Rectangulo(Forma):
    """
    TODO: Completar toda la clase Rectangulo
    - Constructor que reciba base y altura
    - Validar que base y altura sean positivos
    - Implementar m√©todo area()
    - Implementar m√©todo perimetro()
    """
    pass

class Triangulo(Forma):
    """
    TODO: Completar toda la clase Triangulo
    - Constructor que reciba los tres lados (a, b, c)
    - Validar que los lados formen un tri√°ngulo v√°lido (suma de dos lados > tercer lado)
    - Implementar m√©todo area() usando f√≥rmula de Her√≥n
    - Implementar m√©todo perimetro()
    """
    pass

class ColeccionFormas:
    """Gestiona una colecci√≥n de formas geom√©tricas"""
    
    def __init__(self):
        self.formas = []
    
    def agregar(self, forma):
        """
        TODO: Agregar una forma a la colecci√≥n
        - Validar que el objeto sea una instancia de Forma
        - Si no lo es, lanzar un TypeError con mensaje apropiado
        """
        pass
    
    def area_total(self):
        """
        TODO: Calcular la suma de las √°reas de todas las formas
        - Retornar 0 si no hay formas
        """
        pass
    
    def forma_mayor_area(self):
        """
        TODO: Retornar la forma con mayor √°rea
        - Si no hay formas, retornar None
        - Usar una funci√≥n lambda o m√©todo max() con key
        """
        pass

# ====== PRUEBAS QUE DEBEN FUNCIONAR ======
if __name__ == "__main__":
    coleccion = ColeccionFormas()
    
    # Crear formas
    circulo = Circulo(5)
    rectangulo = Rectangulo(4, 6)
    triangulo = Triangulo(3, 4, 5)
    
    # Agregar a la colecci√≥n
    coleccion.agregar(circulo)
    coleccion.agregar(rectangulo)
    coleccion.agregar(triangulo)
    
    # Mostrar resultados
    print("=== FORMAS EN LA COLECCI√ìN ===")
    for forma in coleccion.formas:
        print(forma.descripcion())
    
    print(f"\n √Årea total: {coleccion.area_total():.2f}")
    print(f"Forma con mayor √°rea: {coleccion.forma_mayor_area().descripcion()}")
    
    # Probar validaci√≥n
    try:
        coleccion.agregar("No soy una forma")
    except TypeError as e:
        print(f"\n‚úì Validaci√≥n correcta: {e}")
